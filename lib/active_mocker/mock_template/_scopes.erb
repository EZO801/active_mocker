# _scopes.erb
  module Scopes
    include <%= parent_class %>::Scopes

  <% scope_methods.each do |method| -%>
  def <%= method.name %><%= "(#{method.arguments.parameters})" unless method.arguments.parameters.to_a.empty? %>
      ActiveMocker::LoadedMocks.find('<%= class_name %>').send(:call_mock_method, method: '<%= method.name %>', caller: Kernel.caller, arguments: [<%= method.arguments.arguments(blocks_as_values: true) %>])
    end

  <% end -%>
end

  extend Scopes

  class ScopeRelation < ActiveMocker::Association
    include <%= class_name + mock_append_name %>::Scopes
  end

  def self.__new_relation__(collection)
    <%= class_name + mock_append_name %>::ScopeRelation.new(collection)
  end

  private_class_method :__new_relation__
